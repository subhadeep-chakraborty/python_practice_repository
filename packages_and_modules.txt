üêç Python Modules and Packages ‚Äî Summary & Steps

üîπ What Are Modules and Packages?

Modules
- A module is simply a `.py` file containing Python code (functions, classes, variables, etc.).
- It allows code reusability and helps keep projects organized.
- You can import one module into another using:
  from mymodule import my_func

Example:
# mymodule.py
def my_func():
    print("Hey, I am in mymodule.py")

# myprogram.py
from mymodule import my_func
my_func()

Run ‚Üí python myprogram.py


Packages
- A package is a collection of modules organized in directories.
- It allows better project structuring, especially for large applications.
- A directory is recognized as a package when it contains a special file: __init__.py
  This file can be empty; its presence tells Python, ‚ÄúThis folder is a package.‚Äù


üîπ Steps to Create and Use Modules & Packages

üß© Modules
Step 1: Create a .py file (module)
Example: mymodule.py
def my_func():
    print("Hey, I am in mymodule.py")

Step 2: Create another .py file (main script) in the same folder.
Example: myprogram.py
from mymodule import my_func
my_func()

Step 3: Run your program in the terminal:
python myprogram.py


üì¶ Packages
Step 1: Create a main package folder
MyMainPackage/

Step 2: Add a blank file named:
__init__.py
inside MyMainPackage/

Step 3: Inside that folder, create a module file
MyMainPackage/some_main_script.py
def report_main():
    print("Hey, I am in some_main_script in main package")

Step 4: (Optional) Create a sub-package
MyMainPackage/SubPackage/
- Add another __init__.py
- Add another module file: mysubscript.py
  def sub_report():
      print("Hey, I am a function inside mysubscript")

Step 5: Create your main program file outside the package (e.g., on Desktop)
myprogram.py
from MyMainPackage import some_main_script
from MyMainPackage.SubPackage import mysubscript

some_main_script.report_main()
mysubscript.sub_report()

Step 6: Run your main file:
python myprogram.py


üîπ Key Takeaways

‚úÖ Module = single `.py` script
‚úÖ Package = folder with `__init__.py` that contains modules
‚úÖ You can nest sub-packages using the dot (.) notation.
‚úÖ Import syntax:
from PackageName import ModuleName
from PackageName.SubPackage import ModuleName

‚úÖ Call functions normally:
ModuleName.function_name()

In short:
- Use modules to split large scripts.
- Use packages to organize related modules into folders.
- Always include an __init__.py to make a directory a package.
